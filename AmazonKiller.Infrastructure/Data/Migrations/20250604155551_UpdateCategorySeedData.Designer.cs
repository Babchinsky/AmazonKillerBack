// <auto-generated />
using System;
using AmazonKiller.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AmazonKiller.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AmazonDbContext))]
    [Migration("20250604155551_UpdateCategorySeedData")]
    partial class UpdateCategorySeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("PropertyKeys")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49595c91-f315-4b2e-af8a-0f09c3145c03"),
                            Description = "Fashion category",
                            IconName = "fashion",
                            ImageUrl = "https://example.com/images/fashion.jpg",
                            Name = "Fashion",
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("7eb489f4-2f55-4510-8e49-3965370c4989"),
                            Description = "Men's Clothing category",
                            IconName = "men's clothing",
                            ImageUrl = "https://example.com/images/mens_clothing.jpg",
                            Name = "Men's Clothing",
                            ParentId = new Guid("49595c91-f315-4b2e-af8a-0f09c3145c03"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("69f22c76-7202-44e6-9132-09fd09c55632"),
                            Description = "Women's Clothing category",
                            IconName = "women's clothing",
                            ImageUrl = "https://example.com/images/womens_clothing.jpg",
                            Name = "Women's Clothing",
                            ParentId = new Guid("49595c91-f315-4b2e-af8a-0f09c3145c03"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("be4e31b6-3b78-4d99-a3fa-7cb8a7bc4a8b"),
                            Description = "Shoes category",
                            IconName = "shoes",
                            ImageUrl = "https://example.com/images/shoes.jpg",
                            Name = "Shoes",
                            ParentId = new Guid("49595c91-f315-4b2e-af8a-0f09c3145c03"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("3b464a7d-878c-4b8b-b44f-c78a2b59be3a"),
                            Description = "Accessories category",
                            IconName = "accessories",
                            ImageUrl = "https://example.com/images/accessories.jpg",
                            Name = "Accessories",
                            ParentId = new Guid("49595c91-f315-4b2e-af8a-0f09c3145c03"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("7ad3d843-1642-4e8a-a843-503928ef8154"),
                            Description = "Electronics category",
                            IconName = "electronics",
                            ImageUrl = "https://example.com/images/electronics.jpg",
                            Name = "Electronics",
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("d2deb989-35c5-4ca1-a748-12411d3ac3a4"),
                            Description = "Smartphones category",
                            IconName = "smartphones",
                            ImageUrl = "https://example.com/images/smartphones.jpg",
                            Name = "Smartphones",
                            ParentId = new Guid("7ad3d843-1642-4e8a-a843-503928ef8154"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("22e7ee0d-8962-482b-857d-43ba828de1ff"),
                            Description = "Laptops category",
                            IconName = "laptops",
                            ImageUrl = "https://example.com/images/laptops.jpg",
                            Name = "Laptops",
                            ParentId = new Guid("7ad3d843-1642-4e8a-a843-503928ef8154"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("8fc8707d-97d7-41a1-9c31-50f07b8466f4"),
                            Description = "Cameras category",
                            IconName = "cameras",
                            ImageUrl = "https://example.com/images/cameras.jpg",
                            Name = "Cameras",
                            ParentId = new Guid("7ad3d843-1642-4e8a-a843-503928ef8154"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("c1cd879d-175e-4ff5-b354-054f9f82ce98"),
                            Description = "Audio Devices category",
                            IconName = "audio devices",
                            ImageUrl = "https://example.com/images/audio_devices.jpg",
                            Name = "Audio Devices",
                            ParentId = new Guid("7ad3d843-1642-4e8a-a843-503928ef8154"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("8980e70c-3345-4885-8518-cfcda95b3078"),
                            Description = "Household category",
                            IconName = "household",
                            ImageUrl = "https://example.com/images/household.jpg",
                            Name = "Household",
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("0e6feb3f-f795-4541-8cc6-7d7047951eb9"),
                            Description = "Kitchen Appliances category",
                            IconName = "kitchen appliances",
                            ImageUrl = "https://example.com/images/kitchen_appliances.jpg",
                            Name = "Kitchen Appliances",
                            ParentId = new Guid("8980e70c-3345-4885-8518-cfcda95b3078"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("1b6f5f96-233d-4b82-b30f-27643f6b62eb"),
                            Description = "Cleaning Supplies category",
                            IconName = "cleaning supplies",
                            ImageUrl = "https://example.com/images/cleaning_supplies.jpg",
                            Name = "Cleaning Supplies",
                            ParentId = new Guid("8980e70c-3345-4885-8518-cfcda95b3078"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("d94af679-24f4-4ab2-ae1e-ba3689143579"),
                            Description = "Storage category",
                            IconName = "storage",
                            ImageUrl = "https://example.com/images/storage.jpg",
                            Name = "Storage",
                            ParentId = new Guid("8980e70c-3345-4885-8518-cfcda95b3078"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("2f4f0438-f456-4770-9d49-1a46ed4ec88a"),
                            Description = "Bathroom category",
                            IconName = "bathroom",
                            ImageUrl = "https://example.com/images/bathroom.jpg",
                            Name = "Bathroom",
                            ParentId = new Guid("8980e70c-3345-4885-8518-cfcda95b3078"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("0dfa0836-09c9-4a2d-b74a-9b2085976dcf"),
                            Description = "Furniture category",
                            IconName = "furniture",
                            ImageUrl = "https://example.com/images/furniture.jpg",
                            Name = "Furniture",
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("68ae1c83-85c1-4002-bb32-d00ac9b3a1bb"),
                            Description = "Living Room category",
                            IconName = "living room",
                            ImageUrl = "https://example.com/images/living_room.jpg",
                            Name = "Living Room",
                            ParentId = new Guid("0dfa0836-09c9-4a2d-b74a-9b2085976dcf"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("c9f81657-73a1-4b53-bf80-b59121eae433"),
                            Description = "Bedroom category",
                            IconName = "bedroom",
                            ImageUrl = "https://example.com/images/bedroom.jpg",
                            Name = "Bedroom",
                            ParentId = new Guid("0dfa0836-09c9-4a2d-b74a-9b2085976dcf"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("2f3ad03d-c8a3-4c12-bf7c-db764e634fc4"),
                            Description = "Office Furniture category",
                            IconName = "office furniture",
                            ImageUrl = "https://example.com/images/office_furniture.jpg",
                            Name = "Office Furniture",
                            ParentId = new Guid("0dfa0836-09c9-4a2d-b74a-9b2085976dcf"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("7f3e369a-0b7d-4178-84bf-e4194fac9ed2"),
                            Description = "Outdoor category",
                            IconName = "outdoor",
                            ImageUrl = "https://example.com/images/outdoor.jpg",
                            Name = "Outdoor",
                            ParentId = new Guid("0dfa0836-09c9-4a2d-b74a-9b2085976dcf"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc9bf323-2160-49b2-ae79-340781163eb2"),
                            Description = "Work tools category",
                            IconName = "work tools",
                            ImageUrl = "https://example.com/images/work_tools.jpg",
                            Name = "Work tools",
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("834ba378-fe57-4702-b85c-4cb0431d1909"),
                            Description = "Hand Tools category",
                            IconName = "hand tools",
                            ImageUrl = "https://example.com/images/hand_tools.jpg",
                            Name = "Hand Tools",
                            ParentId = new Guid("cc9bf323-2160-49b2-ae79-340781163eb2"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("1c9d0336-9ac8-440a-b6b6-3698940f608c"),
                            Description = "Power Tools category",
                            IconName = "power tools",
                            ImageUrl = "https://example.com/images/power_tools.jpg",
                            Name = "Power Tools",
                            ParentId = new Guid("cc9bf323-2160-49b2-ae79-340781163eb2"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("18710447-a260-44f2-9a4b-77c0b246bbc5"),
                            Description = "Safety Gear category",
                            IconName = "safety gear",
                            ImageUrl = "https://example.com/images/safety_gear.jpg",
                            Name = "Safety Gear",
                            ParentId = new Guid("cc9bf323-2160-49b2-ae79-340781163eb2"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("158ebe6b-0e3d-48da-8893-5e3621dd2c4b"),
                            Description = "Tool Storage category",
                            IconName = "tool storage",
                            ImageUrl = "https://example.com/images/tool_storage.jpg",
                            Name = "Tool Storage",
                            ParentId = new Guid("cc9bf323-2160-49b2-ae79-340781163eb2"),
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Collections.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MaxPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsActive");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Common.Sequence", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LastValue")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", t =>
                        {
                            t.HasCheckConstraint("CK_OrderItem_Quantity_Positive", "[Quantity] > 0");
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("DiscountPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InCartList")
                        .HasColumnType("bit");

                    b.Property<bool>("InWishlist")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SoldCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.ProductFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.ReviewLike", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewLikes");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.CartList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartLists");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.EmailVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("TempPasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Email", "Type");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.Wishlist", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Categories.Category", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Categories.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Collections.Collection", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Categories.Category", "Category")
                        .WithMany("Collections")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("AmazonKiller.Domain.Entities.Collections.CollectionFilter", "Filters", b1 =>
                        {
                            b1.Property<Guid>("CollectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Key")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("Value")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("CollectionId", "Key", "Value");

                            b1.ToTable("CollectionFilters", (string)null);

                            b1.WithOwner("Collection")
                                .HasForeignKey("CollectionId");

                            b1.Navigation("Collection");
                        });

                    b.Navigation("Category");

                    b.Navigation("Filters");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AmazonKiller.Domain.Entities.Orders.OrderInfo", "Info", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("OrderedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsOne("AmazonKiller.Domain.Entities.Orders.DeliveryInfo", "Delivery", b2 =>
                                {
                                    b2.Property<Guid>("OrderInfoOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasMaxLength(255)
                                        .HasColumnType("nvarchar(255)");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("OrderInfoOrderId");

                                    b2.ToTable("Orders");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderInfoOrderId");

                                    b2.OwnsOne("AmazonKiller.Domain.Entities.Orders.Address", "Address", b3 =>
                                        {
                                            b3.Property<Guid>("DeliveryInfoOrderInfoOrderId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("ApartmentNumber")
                                                .HasMaxLength(20)
                                                .HasColumnType("nvarchar(20)");

                                            b3.Property<string>("City")
                                                .IsRequired()
                                                .HasMaxLength(100)
                                                .HasColumnType("nvarchar(100)");

                                            b3.Property<string>("Country")
                                                .IsRequired()
                                                .HasMaxLength(100)
                                                .HasColumnType("nvarchar(100)");

                                            b3.Property<string>("HouseNumber")
                                                .IsRequired()
                                                .HasMaxLength(20)
                                                .HasColumnType("nvarchar(20)");

                                            b3.Property<Guid>("Id")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("PostCode")
                                                .IsRequired()
                                                .HasMaxLength(20)
                                                .HasColumnType("nvarchar(20)");

                                            b3.Property<string>("State")
                                                .HasMaxLength(100)
                                                .HasColumnType("nvarchar(100)");

                                            b3.Property<string>("Street")
                                                .IsRequired()
                                                .HasMaxLength(100)
                                                .HasColumnType("nvarchar(100)");

                                            b3.HasKey("DeliveryInfoOrderInfoOrderId");

                                            b3.ToTable("Orders");

                                            b3.WithOwner()
                                                .HasForeignKey("DeliveryInfoOrderInfoOrderId");
                                        });

                                    b2.Navigation("Address")
                                        .IsRequired();
                                });

                            b1.OwnsOne("AmazonKiller.Domain.Entities.Orders.PaymentInfo", "Payment", b2 =>
                                {
                                    b2.Property<Guid>("OrderInfoOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("CardNumber")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Cvv")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ExpirationDate")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("PaymentType")
                                        .HasColumnType("int");

                                    b2.HasKey("OrderInfoOrderId");

                                    b2.ToTable("Orders");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderInfoOrderId");
                                });

                            b1.Navigation("Delivery")
                                .IsRequired();

                            b1.Navigation("Payment")
                                .IsRequired();
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Orders.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Categories.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.ProductAttribute", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.ProductFeature", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany("Features")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.Review", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.ReviewLike", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Reviews.Review", "Review")
                        .WithMany("LikesFromUsers")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("LikedReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.CartList", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", null)
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.EmailVerification", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.RefreshToken", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.Wishlist", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Categories.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Collections");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Features");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.Review", b =>
                {
                    b.Navigation("LikesFromUsers");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("LikedReviews");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
