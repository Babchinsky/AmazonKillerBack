// <auto-generated />
using System;
using AmazonKiller.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AmazonKiller.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AmazonDbContext))]
    partial class AmazonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("PropertyKeys")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "A selection of books",
                            IconName = "book",
                            ImageUrl = "https://example.com/images/books.jpg",
                            Name = "Books",
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Tech gadgets and accessories",
                            IconName = "devices",
                            ImageUrl = "https://example.com/images/tech.jpg",
                            Name = "Tech",
                            PropertyKeys = "[]",
                            RowVersion = new byte[0],
                            Status = 0
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Common.Sequence", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LastValue")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", t =>
                        {
                            t.HasCheckConstraint("CK_OrderItem_Quantity_Positive", "[Quantity] > 0");
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("DiscountPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InCartList")
                        .HasColumnType("bit");

                    b.Property<bool>("InWishlist")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SoldCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Code = "01JS9QNDAYKK2CFRT5AKZF1YAA",
                            ImageUrls = "[]",
                            InCartList = true,
                            InWishlist = true,
                            Name = "C# in Depth",
                            Price = 39.99m,
                            Quantity = 10,
                            Rating = 5m,
                            ReviewsCount = 0,
                            RowVersion = new byte[0],
                            SoldCount = 0
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Code = "01JS9QNDAYKK2CFRT5AKZF1YBB",
                            ImageUrls = "[]",
                            InCartList = false,
                            InWishlist = false,
                            Name = "Wireless Mouse",
                            Price = 19.99m,
                            Quantity = 50,
                            Rating = 4m,
                            ReviewsCount = 0,
                            RowVersion = new byte[0],
                            SoldCount = 0
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.ProductFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Article = "Great book!",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrls = "[\"file1.jpg\",\"file2.jpg\"]",
                            Message = "Very useful for learning advanced C#",
                            ProductId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Rating = 5m,
                            RowVersion = new byte[0],
                            Tags = "[]",
                            UserId = new Guid("77777777-7777-7777-7777-777777777777")
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.ReviewLike", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewLikes");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.CartList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartLists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AddedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Price = 39.99m,
                            ProductId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Quantity = 1,
                            UserId = new Guid("77777777-7777-7777-7777-777777777777")
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.EmailVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TempPasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Email", "Type");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "user@example.com",
                            FirstName = "Test",
                            LastName = "User",
                            PasswordHash = "$2a$11$0123456789ABCDEFFEDCB.S2Yzr2tczlChVlvkY9yqWo1rec6s2eC",
                            Role = 0,
                            RowVersion = new byte[0],
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "Root",
                            PasswordHash = "$2a$11$0123456789ABCDEFFEDCB.f3zF6Kwis6bGMA186omDrGf1JNLP/eK",
                            Role = 1,
                            RowVersion = new byte[0],
                            Status = 0
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.Wishlist", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("WishlistItems");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("77777777-7777-7777-7777-777777777777"),
                            ProductId = new Guid("55555555-5555-5555-5555-555555555555"),
                            AddedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Categories.Category", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Categories.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AmazonKiller.Domain.Entities.Orders.OrderInfo", "Info", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("OrderedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsOne("AmazonKiller.Domain.Entities.Orders.DeliveryInfo", "Delivery", b2 =>
                                {
                                    b2.Property<Guid>("OrderInfoOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasMaxLength(255)
                                        .HasColumnType("nvarchar(255)");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("OrderInfoOrderId");

                                    b2.ToTable("Orders");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderInfoOrderId");

                                    b2.OwnsOne("AmazonKiller.Domain.Entities.Orders.Address", "Address", b3 =>
                                        {
                                            b3.Property<Guid>("DeliveryInfoOrderInfoOrderId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("ApartmentNumber")
                                                .HasMaxLength(20)
                                                .HasColumnType("nvarchar(20)");

                                            b3.Property<string>("City")
                                                .IsRequired()
                                                .HasMaxLength(100)
                                                .HasColumnType("nvarchar(100)");

                                            b3.Property<string>("Country")
                                                .IsRequired()
                                                .HasMaxLength(100)
                                                .HasColumnType("nvarchar(100)");

                                            b3.Property<string>("HouseNumber")
                                                .IsRequired()
                                                .HasMaxLength(20)
                                                .HasColumnType("nvarchar(20)");

                                            b3.Property<Guid>("Id")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("PostCode")
                                                .IsRequired()
                                                .HasMaxLength(20)
                                                .HasColumnType("nvarchar(20)");

                                            b3.Property<string>("State")
                                                .HasMaxLength(100)
                                                .HasColumnType("nvarchar(100)");

                                            b3.Property<string>("Street")
                                                .IsRequired()
                                                .HasMaxLength(100)
                                                .HasColumnType("nvarchar(100)");

                                            b3.HasKey("DeliveryInfoOrderInfoOrderId");

                                            b3.ToTable("Orders");

                                            b3.WithOwner()
                                                .HasForeignKey("DeliveryInfoOrderInfoOrderId");
                                        });

                                    b2.Navigation("Address")
                                        .IsRequired();
                                });

                            b1.OwnsOne("AmazonKiller.Domain.Entities.Orders.PaymentInfo", "Payment", b2 =>
                                {
                                    b2.Property<Guid>("OrderInfoOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("CardNumber")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Cvv")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ExpirationDate")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("PaymentType")
                                        .HasColumnType("int");

                                    b2.HasKey("OrderInfoOrderId");

                                    b2.ToTable("Orders");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderInfoOrderId");
                                });

                            b1.Navigation("Delivery")
                                .IsRequired();

                            b1.Navigation("Payment")
                                .IsRequired();
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Orders.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Categories.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.ProductAttribute", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.ProductFeature", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany("Features")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.Review", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.ReviewLike", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Reviews.Review", "Review")
                        .WithMany("LikesFromUsers")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("LikedReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.CartList", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", null)
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.EmailVerification", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.RefreshToken", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.Wishlist", b =>
                {
                    b.HasOne("AmazonKiller.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmazonKiller.Domain.Entities.Users.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Categories.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Features");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Reviews.Review", b =>
                {
                    b.Navigation("LikesFromUsers");
                });

            modelBuilder.Entity("AmazonKiller.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("LikedReviews");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
