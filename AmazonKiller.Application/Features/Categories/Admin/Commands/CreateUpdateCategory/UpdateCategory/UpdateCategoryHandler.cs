using AmazonKiller.Application.Interfaces.Repositories.Products;
using AmazonKiller.Application.Interfaces.Services;
using AmazonKiller.Application.Interfaces.Services.Categories;
using AmazonKiller.Shared.Exceptions;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace AmazonKiller.Application.Features.Categories.Admin.Commands.CreateUpdateCategory.UpdateCategory;

public class UpdateCategoryHandler(
    ICategoryRepository repo,
    ICategoryQueryService categoryQueryService,
    IFileStorage fileStorage
) : IRequestHandler<UpdateCategoryCommand, Guid>
{
    public async Task<Guid> Handle(UpdateCategoryCommand request, CancellationToken ct)
    {
        var category = await repo.GetByIdAsync(request.Id, ct)
                       ?? throw new NotFoundException("Category not found");

        // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ RowVersion
        category.RowVersion = Convert.FromBase64String(request.RowVersion);

        // üß† –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ–∫—É—â—É—é –∏ –ø–æ—Ç–æ–º–∫–æ–≤)
        var allCategoryIds = await categoryQueryService.GetDescendantCategoryIdsAsync(request.Id, ct);
        allCategoryIds.Add(request.Id);

        var allCategories = await repo.Query()
            .Where(c => allCategoryIds.Contains(c.Id))
            .ToListAsync(ct);

        var allPropertyKeys = allCategories
            .SelectMany(c => c.PropertyKeys)
            .ToHashSet();

        if (request.ActivePropertyKeys is not null)
        {
            var invalidKeys = request.ActivePropertyKeys.Where(k => !allPropertyKeys.Contains(k)).ToList();
            if (invalidKeys.Count > 0)
                throw new AppException($"Invalid property keys: {string.Join(", ", invalidKeys)}");
        }

        // üîÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π URL –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        var oldImageUrl = category.ImageUrl;

        // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        var newImageUrl = oldImageUrl;
        if (request.Image is { Length: > 0 })
        {
            await using var stream = request.Image.OpenReadStream();
            var ext = Path.GetExtension(request.Image.FileName);
            newImageUrl = await fileStorage.SaveAsync(stream, ext, ct);
        }

        // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        category.Name = request.Name;
        category.Status = request.Status;
        category.ParentId = request.ParentId;
        category.Description = request.Description;
        category.IconName = request.ParentId == null ? request.IconName : null;
        category.ActivePropertyKeys = request.ActivePropertyKeys ?? [];
        category.ImageUrl = newImageUrl;

        var imageChanged = request.Image != null && newImageUrl != oldImageUrl;
        var updateSucceeded = false;

        try
        {
            await repo.UpdateWithCascadeStatusAsync(category, ct);
            updateSucceeded = true;
        }
        catch (DbUpdateException ex) when (ex.InnerException?.Message.Contains("FOREIGN KEY") == true)
        {
            throw new AppException("Invalid parent category. The specified ParentId does not exist or is invalid.");
        }
        catch (Exception)
        {
            throw new AppException("An unexpected error occurred while updating the category.");
        }
        finally
        {
            if (!updateSucceeded && imageChanged)
                await fileStorage.DeleteAsync(newImageUrl!, ct);
        }

        if (imageChanged && updateSucceeded && oldImageUrl != null)
            await fileStorage.DeleteAsync(oldImageUrl, ct);

        return category.Id;
    }
}