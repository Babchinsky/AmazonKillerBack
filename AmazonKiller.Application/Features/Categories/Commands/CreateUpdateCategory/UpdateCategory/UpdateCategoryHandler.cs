using AmazonKiller.Application.DTOs.Categories;
using AmazonKiller.Application.Interfaces.Repositories.Products;
using AmazonKiller.Application.Interfaces.Services;
using AmazonKiller.Shared.Exceptions;
using AutoMapper;
using MediatR;

namespace AmazonKiller.Application.Features.Categories.Commands.CreateUpdateCategory.UpdateCategory;

public class UpdateCategoryHandler(
    ICategoryRepository repo,
    IFileStorage fileStorage,
    IMapper mapper
) : IRequestHandler<UpdateCategoryCommand, CategoryDto>
{
    public async Task<CategoryDto> Handle(UpdateCategoryCommand request, CancellationToken ct)
    {
        var c = await repo.GetByIdAsync(request.Id, ct)
                ?? throw new NotFoundException("Category not found");

        // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ RowVersion
        c.RowVersion = Convert.FromBase64String(request.RowVersion);

        // üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        var newImageUrl = c.ImageUrl;
        if (request.Image is { Length: > 0 })
        {
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ
            await using var stream = request.Image.OpenReadStream();
            var ext = Path.GetExtension(request.Image.FileName);
            newImageUrl = await fileStorage.SaveAsync(stream, ext, ct);
        }

        // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        c.Name = request.Name;
        c.Status = request.Status;
        c.ParentId = request.ParentId;
        c.Description = request.Description;
        c.IconName = request.ParentId == null ? request.IconName : null;
        c.PropertyKeys = request.ParentId != null ? request.PropertyKeys ?? [] : [];
        c.ImageUrl = newImageUrl;

        // üß™ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        try
        {
            await repo.UpdateAsync(c, ct);
        }
        catch (Exception)
        {
            // –ï—Å–ª–∏ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ø–∞–ª–æ ‚Äî —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
            if (request.Image != null && newImageUrl != c.ImageUrl)
                await fileStorage.DeleteAsync(newImageUrl!, ct);
            throw;
        }

        // üßπ –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–æ–≤–æ–µ –µ—Å—Ç—å –∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
        if (request.Image != null && c.ImageUrl != null && c.ImageUrl != newImageUrl)
            await fileStorage.DeleteAsync(c.ImageUrl, ct);

        return mapper.Map<CategoryDto>(c);
    }
}