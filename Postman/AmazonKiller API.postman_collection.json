{
	"info": {
		"_postman_id": "e3d2547b-303c-4df9-8d56-1064904b8ec0",
		"name": "AmazonKiller API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44878651",
		"_collection_link": "https://oleksiibabchynskyi.postman.co/workspace/Oleksii-Babchynskyi's-Workspace~e1274361-8aee-4fe3-89e4-e315a3e041be/collection/44878651-e3d2547b-303c-4df9-8d56-1064904b8ec0?action=share&source=collection_link&creator=44878651"
	},
	"item": [
		{
			"name": "Addresses",
			"item": [
				{
					"name": "Get Countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is a non-empty array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each element in the array is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(element) {\r",
									"        pm.expect(element).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/countries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Regions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has content type 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body array is not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ответ содержит массив строк с названиями регионов\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    const data = pm.response.json();\r",
									"    pm.expect(data).to.be.an(\"array\");\r",
									"    pm.expect(data.length).to.be.above(0);\r",
									"    pm.expect(data[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"const regions = pm.response.json();\r",
									"const randomRegion = regions[Math.floor(Math.random() * regions.length)];\r",
									"\r",
									"pm.environment.set(\"region\", randomRegion);\r",
									"console.log(\"Выбранный регион:\", randomRegion);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/nova-poshta/regions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nova-poshta",
								"regions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка кода ответа\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Проверка Content-Type\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Проверка, что тело — массив\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Проверка наличия параметра region\r",
									"pm.test(\"Region parameter is present in the request URL\", function () {\r",
									"    const regionParam = pm.request.url.query.find(q => q.key === \"region\");\r",
									"    pm.expect(regionParam).to.not.be.undefined;\r",
									"    pm.expect(regionParam.value).to.be.a('string').and.not.empty;\r",
									"});\r",
									"\r",
									"// Информативно: есть ли данные\r",
									"pm.test(\"Response array is not empty\", function () {\r",
									"    if (responseData.length === 0) {\r",
									"        console.warn(\"❗Города не найдены для региона:\", pm.environment.get(\"region\"));\r",
									"    } else {\r",
									"        pm.expect(responseData.length).to.be.above(0);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/nova-poshta/cities?region={{region}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"nova-poshta",
								"cities"
							],
							"query": [
								{
									"key": "region",
									"value": "{{region}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Register User",
					"item": [
						{
							"name": "Start Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/* ---------- helpers ---------- */\r",
											"const rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"\r",
											"/* ---------- e-mail ---------- */\r",
											"const adjectives = ['cool', 'fast', 'sunny', 'clever', 'bright', 'lucky'];\r",
											"const nouns      = ['fox', 'lion', 'panda', 'otter', 'eagle', 'koala'];\r",
											"\r",
											"const emailName = `${adjectives[rand(0, adjectives.length - 1)]}.` +\r",
											"                  `${nouns[rand(0, nouns.length - 1)]}.` +\r",
											"                  pm.variables.replaceIn('{{$timestamp}}');\r",
											"\r",
											"const email = `${emailName}@mail.com`;\r",
											"\r",
											"/* ---------- password ---------- */\r",
											"const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"const digits  = '0123456789';\r",
											"\r",
											"let password = '';\r",
											"\r",
											"// Добавляем 10 случайных букв\r",
											"for (let i = 0; i < 10; i++) {\r",
											"  password += letters[rand(0, letters.length - 1)];\r",
											"}\r",
											"\r",
											"// Добавляем хотя бы одну цифру\r",
											"password += digits[rand(0, digits.length - 1)];\r",
											"\r",
											"// Перемешиваем пароль\r",
											"password = password.split('').sort(() => 0.5 - Math.random()).join('');\r",
											"\r",
											"/* ---------- save & log ---------- */\r",
											"pm.environment.set('email', email);\r",
											"// pm.environment.set('email', \"alexseyb64@gmail.com\");\r",
											"pm.environment.set('password', password);\r",
											"\r",
											"console.log({ email, password });  // виден в Postman Console"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Регистрация успешно инициирована\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/register/start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// ==== verification code =========================================\r",
											"pm.environment.set('verificationCode', '123456');   // фиксированный код из test-конфига"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Успешное подтверждение кода', () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\",\n  \"code\": \"{{verificationCode}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/register/confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										"confirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// ==== deviceId ==================================================\r",
											"// {{$guid}} -> встроенный генератор Postman\r",
											"const deviceId = pm.variables.replaceIn('{{$guid}}');\r",
											"pm.environment.set('deviceId', deviceId);\r",
											"console.log('deviceId for confirm-registration:', deviceId);\r",
											"\r",
											"// ==== firstName / lastName ======================================\r",
											"const firstNames = ['John', 'Alice', 'Michael', 'Emma', 'David', 'Olivia', 'Robert', 'Sophia'];\r",
											"const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis'];\r",
											"\r",
											"const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
											"const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"\r",
											"pm.environment.set('firstName', firstName);\r",
											"pm.environment.set('lastName', lastName);\r",
											"\r",
											"console.log(`Generated user: ${firstName} ${lastName}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Успешная регистрация', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Разбираем JSON-ответ\r",
											"const data = pm.response.json();\r",
											"\r",
											"// ▸ Сохраняем токены в окружение\r",
											"pm.environment.set('accessToken',  data.accessToken);\r",
											"pm.environment.set('refreshToken', data.refreshToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\",\n  \"code\": \"{{verificationCode}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"deviceId\": \"{{deviceId}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/register/complete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										"complete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Register Admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"\r",
									"const getRandomChar = (chars) => chars[rand(0, chars.length - 1)];\r",
									"\r",
									"const upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"const lower = 'abcdefghijklmnopqrstuvwxyz';\r",
									"const digits = '0123456789';\r",
									"const all = upper + lower + digits;\r",
									"\r",
									"// Гарантируем хотя бы по одному символу из каждой группы\r",
									"let password = \r",
									"    getRandomChar(upper) + \r",
									"    getRandomChar(lower) + \r",
									"    getRandomChar(digits);\r",
									"\r",
									"// Остальные символы (до 12)\r",
									"for (let i = 3; i < 12; i++) {\r",
									"  password += getRandomChar(all);\r",
									"}\r",
									"\r",
									"// Перемешаем символы\r",
									"password = password.split('').sort(() => 0.5 - Math.random()).join('');\r",
									"\r",
									"// Имя, фамилия, email\r",
									"const firstName = `Admin${rand(100, 999)}`;\r",
									"const lastName = `Test${rand(100, 999)}`;\r",
									"const email = `admin_${pm.variables.replaceIn('{{$timestamp}}')}@mail.com`;\r",
									"const secret = pm.environment.get(\"adminSecret\") || \"REMOVED_ADMIN_SECRET\";\r",
									"\r",
									"// Генерация deviceId\r",
									"const deviceId = crypto.randomUUID();  // встроено в Postman\r",
									"\r",
									"// Сохраняем переменные\r",
									"pm.environment.set(\"adminEmail\", email);\r",
									"pm.environment.set(\"adminPassword\", password);\r",
									"pm.environment.set(\"adminFirstName\", firstName);\r",
									"pm.environment.set(\"adminLastName\", lastName);\r",
									"pm.environment.set(\"adminSecret\", secret);\r",
									"pm.environment.set(\"deviceId3\", deviceId); // 👈 добавляем deviceId3\r",
									"\r",
									"// Лог\r",
									"console.log({ email, password, firstName, lastName, secret, deviceId });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Разбираем JSON-ответ\r",
									"const data = pm.response.json();\r",
									"\r",
									"// Сохраняем токен в окружение\r",
									"pm.environment.set('adminAccessToken', data.accessToken);\r",
									"pm.environment.set('adminRefreshToken', data.refreshToken);\r",
									"\r",
									"// Логируем токен\r",
									"console.log(\"Access token:\", data.accessToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\",\n  \"firstName\": \"{{adminFirstName}}\",\n  \"lastName\": \"{{adminLastName}}\",\n  \"secret\": \"{{adminSecret}}\",\n  \"deviceId\": \"{{deviceId}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register/admin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Успешный вход', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Разбираем JSON-ответ\r",
									"const data = pm.response.json();\r",
									"\r",
									"// ▸ Сохраняем токены в окружение\r",
									"pm.environment.set('accessToken',  data.accessToken);\r",
									"pm.environment.set('refreshToken', data.refreshToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"deviceId\": \"{{deviceId}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Успешное получение accessToken', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Разбираем JSON-ответ\r",
									"const data = pm.response.json();\r",
									"\r",
									"// ▸ Сохраняем токены в окружение\r",
									"pm.environment.set('accessToken',  data.accessToken);\r",
									"pm.environment.set('refreshToken', data.refreshToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\",\n  \"deviceId\": \"{{deviceId}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/refresh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Change Email",
					"item": [
						{
							"name": "Start Changing Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Пример: задать случайный email\r",
											"pm.environment.set(\"email\", `changeduser+${Date.now()}@example.com`);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no content\", () => {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"newEmail\": \"{{email}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/profile/email-change/start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"profile",
										"email-change",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm Changing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Успешное подтверждение почты\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{verificationCode}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/profile/email-change/confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"profile",
										"email-change",
										"confirm"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Change Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// --- Утилита ---\r",
									"const rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"\r",
									"// --- Имя и фамилия ---\r",
									"const firstName = `Admin${rand(100, 999)}`;\r",
									"const lastName = `Test${rand(100, 999)}`;\r",
									"\r",
									"pm.environment.set(\"firstName\", firstName);\r",
									"pm.environment.set(\"lastName\", lastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no content\", function () {\r",
									"  pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/account/profile/name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account",
								"profile",
								"name"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generatePassword(length = 10) {\r",
									"    const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"    const lower = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    const digits = \"0123456789\";\r",
									"    const specials = \"@#$!\";\r",
									"    const all = upper + lower + digits + specials;\r",
									"\r",
									"    // Гарантируем хотя бы одну цифру\r",
									"    let password = digits.charAt(Math.floor(Math.random() * digits.length));\r",
									"\r",
									"    // Остальные символы случайные\r",
									"    for (let i = 1; i < length; i++) {\r",
									"        password += all.charAt(Math.floor(Math.random() * all.length));\r",
									"    }\r",
									"\r",
									"    // Перемешиваем пароль\r",
									"    password = password.split('').sort(() => 0.5 - Math.random()).join('');\r",
									"    return password;\r",
									"}\r",
									"\r",
									"const newPassword = generatePassword();\r",
									"pm.environment.set(\"newPassword\", newPassword);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no content\", () => {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"// Только если статус 204 — обновляем password\r",
									"if (pm.response.code === 204) {\r",
									"    pm.environment.set(\"password\", pm.environment.get(\"newPassword\"));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\": \"{{password}}\",\n  \"newPassword\": \"{{newPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/account/profile/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account",
								"profile",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Photo",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Photo",
									"type": "file",
									"src": "/C:/Users/alexs/OneDrive/Desktop/Postman/user1.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/account/profile/photo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account",
								"profile",
								"photo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no content\", () => {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"// Очистить токены после выхода\r",
									"if (pm.response.code === 204) {\r",
									"    pm.environment.unset(\"accessToken\");\r",
									"    pm.environment.unset(\"refreshToken\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/account/profile/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account",
								"profile",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Пользователь удалён успешно (204)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"accessToken\");\r",
									"pm.environment.unset(\"refreshToken\");\r",
									"\r",
									"console.log(\"Токены очищены из окружения после удаления аккаунта\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/account/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"account",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Create Category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const timestamp = Date.now();\r",
											"pm.environment.set(\"categoryName\", `TestCategory_${timestamp}`); \r",
											"\r",
											"pm.environment.set(\"categoryParentId\", `11111111-1111-1111-1111-111111111111`);\r",
											"// pm.environment.set(\"categoryParentId\", `\"64d59186-54f6-4304-9ce0-86296c927051\"`);\r",
											"// pm.environment.set(\"categoryParentId\", null);\r",
											"const parentId = pm.environment.get(\"categoryParentId\");\r",
											"const isSubcategory = parentId && parentId !== \"null\" && parentId !== \"\";\r",
											"\r",
											"// Общие поля\r",
											"pm.environment.set(\"categoryDescription\", `Auto-generated test category at ${timestamp}`);\r",
											"pm.environment.set(\"categoryImageUrl\", `https://example.com/image_${timestamp}.jpg`);\r",
											"pm.environment.set(\"categoryStatus\", 0); // 0 = Active\r",
											"\r",
											"\r",
											"pm.environment.set(\"categoryPropertyKeys\", \"[]\");\r",
											"\r",
											"if (isSubcategory) {\r",
											"    // Subcategory\r",
											"    pm.environment.set(\"categoryIconName\", null);\r",
											"    // pm.environment.set(\"categoryPropertyKeys\", JSON.stringify([\"Color\", \"Size\", \"Material\"]));\r",
											"} else {\r",
											"    // Main category\r",
											"    pm.environment.set(\"categoryParentId\", null);\r",
											"    pm.environment.set(\"categoryIconName\", `icon_${timestamp}`);\r",
											"    // pm.environment.set(\"categoryPropertyKeys\", \"[]\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ✅ Проверяем, что статус — 201 Created\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"// ✅ Извлекаем тело ответа\r",
											"const json = pm.response.json();\r",
											"\r",
											"// ✅ Сохраняем переменные, если есть\r",
											"if (json && json.id && json.rowVersion) {\r",
											"    pm.environment.set(\"categoryId\", json.id);\r",
											"    pm.environment.set(\"categoryRowVersion\", json.rowVersion);\r",
											"    console.log(\"Saved categoryId:\", json.id);\r",
											"    console.log(\"Saved categoryRowVersion:\", json.rowVersion);\r",
											"} else {\r",
											"    console.warn(\"ID or rowVersion not found in response\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Name",
											"value": "{{categoryName}}",
											"type": "text"
										},
										{
											"key": "Description",
											"value": "{{categoryDescription}}",
											"type": "text"
										},
										{
											"key": "Status",
											"value": "{{categoryStatus}}",
											"description": " (This can only be one of 0,1)",
											"type": "text"
										},
										{
											"key": "ParentId",
											"value": "{{categoryParentId}}",
											"type": "text"
										},
										{
											"key": "IconName",
											"value": "{{categoryIconName}}",
											"type": "text"
										},
										{
											"key": "PropertyKeys",
											"value": "{{categoryPropertyKeys}}",
											"type": "text"
										},
										{
											"key": "Image",
											"type": "file",
											"src": "/C:/Users/alexs/OneDrive/Desktop/category1.jpg"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Category",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Id",
											"value": "{{categoryId}}",
											"type": "text"
										},
										{
											"key": "RowVersion",
											"value": "{{categoryRowVersion}}",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "{{categoryName}}",
											"type": "text"
										},
										{
											"key": "Description",
											"value": "{{categoryDescription}}",
											"type": "text"
										},
										{
											"key": "Status",
											"value": "{{categoryStatus}}",
											"description": " (This can only be one of 0,1)",
											"type": "text"
										},
										{
											"key": "ParentId",
											"value": "{{categoryParentId}}",
											"type": "text"
										},
										{
											"key": "IconName",
											"value": "{{categoryIconName}}",
											"type": "text"
										},
										{
											"key": "PropertyKeys",
											"value": "{{categoryPropertyKeys}}",
											"type": "text"
										},
										{
											"key": "Image",
											"type": "file",
											"src": "/C:/Users/alexs/OneDrive/Desktop/category2.jpeg"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{categoryId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - id and name\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(category) {\r",
											"        pm.expect(category).to.have.property('id');\r",
											"        pm.expect(category).to.have.property('name');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ID is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('array');\r",
											"  responseData.forEach(function(category) {\r",
											"    pm.expect(category.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  responseData.forEach(function(category) {\r",
											"    pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/admin/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bulk Delete Categories",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const id1 = \"13a2b10a-ebc0-4c30-a80f-b9b22195eb43\";\r",
											"const id2 = \"27190D8C-75E9-4C4E-8EF0-FF579049A2D3\";\r",
											"\r",
											"const id3 = \"11111111-1111-1111-1111-111111111113\";\r",
											"const id4 = \"22222222-2222-2222-2222-222222222223\";\r",
											"\r",
											"pm.environment.set(\"categoryId1\", id1);\r",
											"pm.environment.set(\"categoryId2\", id2);\r",
											"pm.environment.set(\"categoryId3\", id3);\r",
											"pm.environment.set(\"categoryId4\", id4);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has deletedCount and notFoundIds\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json).to.have.property(\"deletedCount\");\r",
											"    pm.expect(json).to.have.property(\"notFoundIds\");\r",
											"    pm.expect(json.notFoundIds).to.be.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"{{categoryId1}}\",\n    \"{{categoryId2}}\",\n    \"{{categoryId3}}\",\n    \"{{categoryId4}}\"\n  ]\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/categories/delete-many",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"categories",
										"delete-many"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Public",
					"item": [
						{
							"name": "Get Active Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - id and name\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(category) {\r",
											"        pm.expect(category).to.have.property('id');\r",
											"        pm.expect(category).to.have.property('name');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ID is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('array');\r",
											"  responseData.forEach(function(category) {\r",
											"    pm.expect(category.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  responseData.forEach(function(category) {\r",
											"    pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Category by Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Временно — подставь вручную нужный ID\r",
											"// pm.environment.set(\"categoryId\", \"11111111-1111-1111-1111-111111111111\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ✅ Проверка, что запрос выполнен успешно\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// ✅ Проверка, что ответ — JSON\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// ✅ Проверка структуры объекта категории\r",
											"pm.test(\"Response has valid category structure\", function () {\r",
											"    const category = pm.response.json();\r",
											"\r",
											"    pm.expect(category).to.be.an(\"object\");\r",
											"    pm.expect(category).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(category).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(category).to.have.property(\"status\");\r",
											"    pm.expect(category).to.have.property(\"parentId\");\r",
											"\r",
											"    // ✅ Сохраняем id и rowVersion в окружение\r",
											"    if (category.id && category.rowVersion) {\r",
											"        pm.environment.set(\"categoryId\", category.id);\r",
											"        pm.environment.set(\"categoryRowVersion\", category.rowVersion);\r",
											"        console.log(\"Saved categoryId:\", category.id);\r",
											"        console.log(\"Saved categoryRowVersion:\", category.rowVersion);\r",
											"    } else {\r",
											"        console.warn(\"ID or rowVersion not found in response\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{categoryId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Category Filters by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус ответа 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const json = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ содержит объект filters\", function () {\r",
											"  pm.expect(json).to.have.property(\"filters\");\r",
											"  pm.expect(json.filters).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Содержит хотя бы один доступный фильтр\", function () {\r",
											"  pm.expect(Object.keys(json.filters).length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"// Пример: проверка, что есть определённые ключи\r",
											"[\"Color\", \"Size\", \"Material\"].forEach((key) => {\r",
											"  if (json.filters.hasOwnProperty(key)) {\r",
											"    pm.test(`Фильтр '${key}' существует и является массивом`, () => {\r",
											"      pm.expect(json.filters[key]).to.be.an(\"array\");\r",
											"    });\r",
											"  }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/categories/:id/filters",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"categories",
										":id",
										"filters"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{categoryId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Category Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is boolean\", function () {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(typeof body).to.eql(\"boolean\");\r",
											"});\r",
											"\r",
											"// Сохраняем результат в переменную окружения\r",
											"const exists = pm.response.json();\r",
											"pm.environment.set(\"categoryExists\", exists);\r",
											"console.log(\"Category exists:\", exists);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/categories/:id/exists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"categories",
										":id",
										"exists"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{categoryId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Category Tree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the structure of the response object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(category){\r",
											"        pm.expect(category).to.be.an('object');\r",
											"        pm.expect(category.id).to.be.a('string');\r",
											"        pm.expect(category.name).to.be.a('string');\r",
											"        pm.expect(category.status).to.exist;\r",
											"        pm.expect(category.children).to.be.an('array');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Id, name, and status fields are present and non-empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    \r",
											"    responseData.forEach(function(category) {\r",
											"        pm.expect(category.id).to.exist.and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
											"        pm.expect(category.name).to.exist.and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"        pm.expect(category.status).to.exist.and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Children array is present (any length)\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    \r",
											"    responseData.forEach(function(item) {\r",
											"        pm.expect(item.children).to.exist.and.to.be.an('array');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/categories/tree",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"categories",
										"tree"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Create Product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/* ------------- helpers ------------- */\r",
											"function getRandomInt(min, max) {\r",
											"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"function pickRandom(arr, howMany) {\r",
											"    const copy = [...arr];\r",
											"    const result = [];\r",
											"    while (result.length < howMany && copy.length) {\r",
											"        const idx = getRandomInt(0, copy.length - 1);\r",
											"        result.push(copy.splice(idx, 1)[0]);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"/* ------------- уникальные поля ------------- */\r",
											"pm.environment.set(\"productCode\", \"PROD-\" + Date.now());                // артикул\r",
											"pm.environment.set(\"productName\", \"Test Product \" + getRandomInt(1, 999));\r",
											"\r",
											"const price = getRandomInt(10, 500).toFixed(2);\r",
											"pm.environment.set(\"productPrice\", price);\r",
											"\r",
											"const discount = Math.random() < 0.5 ? getRandomInt(5, 25).toFixed(2) : \"\";\r",
											"pm.environment.set(\"productDiscountPercent\", discount);\r",
											"\r",
											"pm.environment.set(\"productQuantity\", getRandomInt(1, 100));\r",
											"\r",
											"/* ------------- пул исходных данных ------------- */\r",
											"const ATTR_BANK = [\r",
											"    { key: \"Color\",  value: \"Black\"   },\r",
											"    { key: \"Color\",  value: \"White\"   },\r",
											"    { key: \"Color\",  value: \"Red\"     },\r",
											"    { key: \"Size\",   value: \"S\"       },\r",
											"    { key: \"Size\",   value: \"M\"       },\r",
											"    { key: \"Size\",   value: \"L\"       },\r",
											"    { key: \"Material\", value: \"Cotton\"},\r",
											"    { key: \"Material\", value: \"Leather\"},\r",
											"    { key: \"Origin\", value: \"USA\"     },\r",
											"    { key: \"Origin\", value: \"Ukraine\" }\r",
											"];\r",
											"\r",
											"const FEAT_BANK = [\r",
											"    { name: \"Durable\",      description: \"Made from quality materials\" },\r",
											"    { name: \"Waterproof\",   description: \"Can resist water splash\"     },\r",
											"    { name: \"Lightweight\",  description: \"Very easy to carry\"          },\r",
											"    { name: \"Eco-friendly\", description: \"Made with sustainable materials\" },\r",
											"    { name: \"Compact\",      description: \"Small form-factor, easy storage\" },\r",
											"    { name: \"Ergonomic\",    description: \"Comfortable to use\"          }\r",
											"];\r",
											"\r",
											"/* ------------- выбираем случайный набор ------------- */\r",
											"const attrs    = pickRandom(ATTR_BANK,    getRandomInt(1, 3));\r",
											"const features = pickRandom(FEAT_BANK,   getRandomInt(1, 3));\r",
											"\r",
											"pm.environment.set(\"productAttributes\", JSON.stringify(attrs));\r",
											"pm.environment.set(\"productFeatures\",   JSON.stringify(features));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"    const raw = pm.response.json();\r",
											"    const id = typeof raw === 'string' ? raw : raw?.id;\r",
											"    const rowVersion = typeof raw === 'object' ? raw?.rowVersion : undefined;\r",
											"\r",
											"    pm.test(\"Product created successfully\", () => {\r",
											"        pm.expect(id, \"Product ID should be present\").to.not.be.undefined;\r",
											"    });\r",
											"\r",
											"    if (id) {\r",
											"        pm.environment.set(\"lastProductId\", id);\r",
											"        console.log(\"✅ Created Product ID:\", id);\r",
											"    }\r",
											"\r",
											"    if (rowVersion) {\r",
											"        pm.environment.set(\"productRowVersion\", rowVersion);\r",
											"        console.log(\"✅ Saved productRowVersion:\", rowVersion);\r",
											"    } else {\r",
											"        console.warn(\"⚠️ rowVersion not found in response\");\r",
											"    }\r",
											"} else {\r",
											"    pm.test(\"Request should succeed\", () => {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Code",
											"value": "{{productCode}}",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "{{productName}}",
											"type": "text"
										},
										{
											"key": "CategoryId",
											"value": "{{categoryId}}",
											"type": "text"
										},
										{
											"key": "Price",
											"value": "{{productPrice}}",
											"type": "text"
										},
										{
											"key": "DiscountPercent",
											"value": "{{productDiscountPercent}}",
											"type": "text"
										},
										{
											"key": "Quantity",
											"value": "{{productQuantity}}",
											"type": "text"
										},
										{
											"key": "Images",
											"type": "file",
											"src": [
												"/C:/Users/alexs/OneDrive/Desktop/Postman/product1_photo.jpeg",
												"/C:/Users/alexs/OneDrive/Desktop/Postman/product2_photo.jpg"
											]
										},
										{
											"key": "Attributes",
											"value": "{{productAttributes}}",
											"type": "text"
										},
										{
											"key": "Features",
											"value": "{{productFeatures}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/* ---------- helpers ---------- */\r",
											"function getRandomInt(min, max) {\r",
											"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"function pickRandom(arr, howMany) {\r",
											"    const copy = [...arr];\r",
											"    const result = [];\r",
											"    while (result.length < howMany && copy.length) {\r",
											"        const idx = getRandomInt(0, copy.length - 1);\r",
											"        result.push(copy.splice(idx, 1)[0]);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"/* ---------- уникальные поля ---------- */\r",
											"pm.environment.set(\"productChangeName\", \"Updated Product \" + getRandomInt(100, 999));\r",
											"pm.environment.set(\"productChangeCode\", \"PROD-\" + Date.now());\r",
											"\r",
											"pm.environment.set(\"productChangePrice\", getRandomInt(100, 999).toFixed(2));\r",
											"\r",
											"const discount = Math.random() < 0.5 ? getRandomInt(5, 30).toFixed(2) : \"\";\r",
											"pm.environment.set(\"productChangeDiscountPercent\", discount);\r",
											"\r",
											"pm.environment.set(\"productChangeQuantity\", getRandomInt(5, 50));\r",
											"\r",
											"/* ---------- «банк» данных ---------- */\r",
											"const ATTR_BANK = [\r",
											"    { key: \"Color\",    value: \"Black\"   },\r",
											"    { key: \"Color\",    value: \"White\"   },\r",
											"    { key: \"Size\",     value: \"M\"       },\r",
											"    { key: \"Size\",     value: \"L\"       },\r",
											"    { key: \"Material\", value: \"Cotton\"  },\r",
											"    { key: \"Material\", value: \"Leather\" },\r",
											"    { key: \"Origin\",   value: \"USA\"     },\r",
											"    { key: \"Origin\",   value: \"Ukraine\" }\r",
											"];\r",
											"\r",
											"const FEAT_BANK = [\r",
											"    { name: \"Durable\",      description: \"Made from quality materials\"      },\r",
											"    { name: \"Waterproof\",   description: \"Can resist water splash\"          },\r",
											"    { name: \"Lightweight\",  description: \"Very easy to carry\"               },\r",
											"    { name: \"Eco-friendly\", description: \"Made with sustainable materials\"  },\r",
											"    { name: \"Compact\",      description: \"Small form-factor, easy storage\"  },\r",
											"    { name: \"Ergonomic\",    description: \"Comfortable to use\"               }\r",
											"];\r",
											"\r",
											"/* ---------- случайный набор ---------- */\r",
											"const newAttrs    = pickRandom(ATTR_BANK,  getRandomInt(1, 3));\r",
											"const newFeatures = pickRandom(FEAT_BANK, getRandomInt(1, 3));\r",
											"\r",
											"pm.environment.set(\"productChangeAttributes\", JSON.stringify(newAttrs));\r",
											"pm.environment.set(\"productChangeFeatures\",   JSON.stringify(newFeatures));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"if (data?.id) {\r",
											"    pm.environment.set(\"lastProductId\", data.id); // обновим ID на случай, если он вдруг меняется\r",
											"    pm.environment.set(\"productRowVersion\", data.rowVersion);\r",
											"\r",
											"    // Переносим изменения из productChange → product*\r",
											"    pm.environment.set(\"productName\", pm.environment.get(\"productChangeName\"));\r",
											"    pm.environment.set(\"productCode\", pm.environment.get(\"productChangeCode\"));\r",
											"    pm.environment.set(\"productPrice\", pm.environment.get(\"productChangePrice\"));\r",
											"    pm.environment.set(\"productDiscountPercent\", pm.environment.get(\"productChangeDiscountPercent\"));\r",
											"    pm.environment.set(\"productQuantity\", pm.environment.get(\"productChangeQuantity\"));\r",
											"    pm.environment.set(\"productAttributes\", pm.environment.get(\"productChangeAttributes\"));\r",
											"    pm.environment.set(\"productFeatures\", pm.environment.get(\"productChangeFeatures\"));\r",
											"\r",
											"    console.log(\"✅ Product updated. ID:\", data.id);\r",
											"} else {\r",
											"    console.warn(\"⚠️ Response did not contain ID\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Id",
											"value": "{{lastProductId}}",
											"type": "text"
										},
										{
											"key": "RowVersion",
											"value": "{{productRowVersion}}",
											"type": "text"
										},
										{
											"key": "Code",
											"value": "{{productChangeCode}}",
											"type": "text"
										},
										{
											"key": "Name",
											"value": "{{productChangeName}}",
											"type": "text"
										},
										{
											"key": "CategoryId",
											"value": "{{categoryId}}",
											"type": "text"
										},
										{
											"key": "Price",
											"value": "{{productChangePrice}}",
											"type": "text"
										},
										{
											"key": "DiscountPercent",
											"value": "{{productChangeDiscountPercent}}",
											"type": "text"
										},
										{
											"key": "Quantity",
											"value": "{{productChangeQuantity}}",
											"type": "text"
										},
										{
											"key": "Images",
											"type": "file",
											"src": [
												"/C:/Users/alexs/OneDrive/Desktop/product3.jpg",
												"/C:/Users/alexs/OneDrive/Desktop/product4.jpg"
											]
										},
										{
											"key": "Attributes",
											"value": "{{productChangeAttributes}}",
											"type": "text"
										},
										{
											"key": "Features",
											"value": "{{productChangeFeatures}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastProductId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Products by Filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const rndInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"// const pick = (arr) => arr[Math.floor(Math.random() * arr.length)];\r",
											"\r",
											"// // Случайные значения\r",
											"// // pm.environment.set(\"productSearchTerm\", pick([\"notebook\", \"jacket\", \"phone\", \"bag\"]));\r",
											"// pm.environment.set(\"productCategoryId\", pm.environment.get(\"productCategoryId\") ?? \"\");\r",
											"\r",
											"// // 🟡 Ключи фильтров\r",
											"// pm.environment.set(\"productFilterSizeKey\", \"Size\");\r",
											"// pm.environment.set(\"productFilterColorKey\", \"Color\");\r",
											"\r",
											"// // 🟢 Значения фильтров\r",
											"// pm.environment.set(\"productFilterSizeValue\", pick([\"S\", \"M\", \"L\", \"XL\"]));\r",
											"// pm.environment.set(\"productFilterColorValue\", pick([\"Black\", \"White\", \"Red\", \"Blue\"]));\r",
											"\r",
											"// // 🟠 Цены\r",
											"// const min = rndInt(10, 100);\r",
											"// const max = rndInt(min + 10, min + 300);\r",
											"// pm.environment.set(\"productMinPrice\", min);\r",
											"// pm.environment.set(\"productMaxPrice\", max);\r",
											"\r",
											"// // 🔵 Пагинация и сортировка\r",
											"// pm.environment.set(\"productPage\", 1);\r",
											"// pm.environment.set(\"productPageSize\", 20);\r",
											"// pm.environment.set(\"productSortField\", pick([\"price\", \"name\", \"rating\", \"soldcount\", \"quantity\", \"reviewscount\"]));\r",
											"// pm.environment.set(\"productSortOrder\", Math.random() < 0.5 ? \"asc\" : \"desc\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// const data = pm.response.json();\r",
											"// pm.test(\"Items are returned\", () => {\r",
											"//   pm.expect(data.items.length).to.be.at.least(0);\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/admin/products?Rating=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"products"
									],
									"query": [
										{
											"key": "SearchTerm",
											"value": "{{productSearchTerm}}",
											"disabled": true
										},
										{
											"key": "CategoryId",
											"value": "{{categoryId}}",
											"disabled": true
										},
										{
											"key": "Filters[{{productFilterSizeKey}}]",
											"value": "{{productFilterSizeValue}}",
											"disabled": true
										},
										{
											"key": "Filters[{{productFilterColorKey}}]",
											"value": "{{productFilterColorValue}}",
											"disabled": true
										},
										{
											"key": "Filters[commodo__d1]",
											"value": "proident officia sunt",
											"disabled": true
										},
										{
											"key": "Filters[est3b0]",
											"value": "voluptate elit",
											"disabled": true
										},
										{
											"key": "Filters[in5]",
											"value": "adipisicing amet consequat laborum labo",
											"disabled": true
										},
										{
											"key": "MinPrice",
											"value": "200",
											"disabled": true
										},
										{
											"key": "MaxPrice",
											"value": "250",
											"disabled": true
										},
										{
											"key": "Rating",
											"value": "4"
										},
										{
											"key": "Parameters.Page",
											"value": "2",
											"disabled": true
										},
										{
											"key": "Parameters.PageSize",
											"value": "2",
											"disabled": true
										},
										{
											"key": "Parameters.SortBy",
											"value": "{{productSortField}}",
											"disabled": true
										},
										{
											"key": "Parameters.SortOrder",
											"value": "{{productSortOrder}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bulk Delete Products",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Статус ответа 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ids\": [\n    \"9736F4D1-47EC-4183-AEC9-436E54A78AC9\",\n    \"6D48F8EF-E9BF-4002-8F03-25E917E7CC4D\",\n    \"F2DC0734-5C89-4D3E-BC4E-77620D94D513\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/products/delete-many",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"products",
										"delete-many"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Public",
					"item": [
						{
							"name": "Get Active Products by Filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const rndInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"// const pick = (arr) => arr[Math.floor(Math.random() * arr.length)];\r",
											"\r",
											"// // Случайные значения\r",
											"// // pm.environment.set(\"productSearchTerm\", pick([\"notebook\", \"jacket\", \"phone\", \"bag\"]));\r",
											"// pm.environment.set(\"productCategoryId\", pm.environment.get(\"productCategoryId\") ?? \"\");\r",
											"\r",
											"// // 🟡 Ключи фильтров\r",
											"// pm.environment.set(\"productFilterSizeKey\", \"Size\");\r",
											"// pm.environment.set(\"productFilterColorKey\", \"Color\");\r",
											"\r",
											"// // 🟢 Значения фильтров\r",
											"// pm.environment.set(\"productFilterSizeValue\", pick([\"S\", \"M\", \"L\", \"XL\"]));\r",
											"// pm.environment.set(\"productFilterColorValue\", pick([\"Black\", \"White\", \"Red\", \"Blue\"]));\r",
											"\r",
											"// // 🟠 Цены\r",
											"// const min = rndInt(10, 100);\r",
											"// const max = rndInt(min + 10, min + 300);\r",
											"// pm.environment.set(\"productMinPrice\", min);\r",
											"// pm.environment.set(\"productMaxPrice\", max);\r",
											"\r",
											"// // 🔵 Пагинация и сортировка\r",
											"// pm.environment.set(\"productPage\", 1);\r",
											"// pm.environment.set(\"productPageSize\", 20);\r",
											"// pm.environment.set(\"productSortField\", pick([\"price\", \"name\", \"rating\", \"soldcount\", \"quantity\", \"reviewscount\"]));\r",
											"// pm.environment.set(\"productSortOrder\", Math.random() < 0.5 ? \"asc\" : \"desc\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// const data = pm.response.json();\r",
											"// pm.test(\"Items are returned\", () => {\r",
											"//   pm.expect(data.items.length).to.be.at.least(0);\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "SearchTerm",
											"value": "ut laboris sit mollit",
											"disabled": true
										},
										{
											"key": "CategoryId",
											"value": "484d573c-47f9-103f-b34c-24cc14fe727b",
											"disabled": true
										},
										{
											"key": "Filters[proidente24]",
											"value": "minim consectetur",
											"disabled": true
										},
										{
											"key": "Filters[laborum96d]",
											"value": "elit ea",
											"disabled": true
										},
										{
											"key": "Filters[nisi8ae]",
											"value": "laboris",
											"disabled": true
										},
										{
											"key": "MinPrice",
											"value": "-12930565.462214977",
											"disabled": true
										},
										{
											"key": "MaxPrice",
											"value": "-12930565.462214977",
											"disabled": true
										},
										{
											"key": "Parameters.Page",
											"value": "69511263",
											"disabled": true
										},
										{
											"key": "Parameters.PageSize",
											"value": "69511263",
											"disabled": true
										},
										{
											"key": "Parameters.SortBy",
											"value": "ut laboris sit mollit",
											"disabled": true
										},
										{
											"key": "Parameters.SortOrder",
											"value": "ut laboris sit mollit",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Сохраняем rowVersion в переменную окружения\r",
											"const response = pm.response.json();\r",
											"pm.environment.set(\"productRowVersion\", response.rowVersion);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastProductId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Product Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Проверка статуса 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Проверка, что возвращается булевый результат\r",
											"pm.test(\"Body is boolean\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(typeof json).to.eql(\"boolean\");\r",
											"});\r",
											"\r",
											"// Сохраняем результат как переменную окружения\r",
											"pm.environment.set(\"productExists\", pm.response.json());\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/products/:id/exists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products",
										":id",
										"exists"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastProductId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "Create Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200 || pm.response.code === 201) {\r",
											"    const review = pm.response.json();\r",
											"\r",
											"    pm.test(\"Review created successfully\", () => {\r",
											"        pm.expect(review).to.be.an(\"object\");\r",
											"        pm.expect(review.id, \"Review ID should exist\").to.be.a(\"string\");\r",
											"        pm.expect(review.createdAt, \"createdAt should be present\").to.be.a(\"string\");\r",
											"        pm.expect(review.rowVersion, \"rowVersion should exist\").to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    if (review.id) {\r",
											"        pm.environment.set(\"reviewId\", review.id);\r",
											"        console.log(\"✅ Saved reviewId:\", review.id);\r",
											"    }\r",
											"\r",
											"    if (review.createdAt) {\r",
											"        pm.environment.set(\"reviewCreatedAt\", review.createdAt);\r",
											"        console.log(\"🕒 Saved reviewCreatedAt:\", review.createdAt);\r",
											"    }\r",
											"\r",
											"    if (review.rowVersion) {\r",
											"        pm.environment.set(\"reviewRowVersion\", review.rowVersion);\r",
											"        console.log(\"🔁 Saved reviewRowVersion:\", review.rowVersion);\r",
											"    }\r",
											"} else {\r",
											"    pm.test(\"Request should return 200 or 201\", () => {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Генерация случайных значений для тестового отзыва\r",
											"pm.environment.set(\"reviewArticle\", \"Review \" + Math.floor(Math.random() * 100000));\r",
											"pm.environment.set(\"reviewMessage\", \"This is a sample message with ID \" + Date.now());\r",
											"pm.environment.set(\"reviewRating\", (Math.floor(Math.random() * 5) + 1).toString());\r",
											"const tags = [\"tag1\", \"tag2\", \"test\"];\r",
											"pm.environment.set(\"reviewTags0\", tags[0]);\r",
											"pm.environment.set(\"reviewTags1\", tags[1]);\r",
											"pm.environment.set(\"reviewTags2\", tags[2]);\r",
											"\r",
											"// Проверка наличия lastProductId\r",
											"if (!pm.environment.get(\"lastProductId\")) {\r",
											"    console.warn(\"⚠️ Variable 'lastProductId' is not set\");\r",
											"} else {\r",
											"    pm.environment.set(\"reviewProductId\", pm.environment.get(\"lastProductId\"));\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "ProductId",
											"value": "{{lastProductId}}",
											"type": "text"
										},
										{
											"key": "Article",
											"value": "{{reviewArticle}}",
											"type": "text"
										},
										{
											"key": "Message",
											"value": "{{reviewMessage}}",
											"type": "text"
										},
										{
											"key": "Rating",
											"value": "{{reviewRating}}",
											"type": "text"
										},
										{
											"key": "UploadedFiles",
											"type": "file",
											"src": [
												"/C:/Users/alexs/OneDrive/Desktop/review1.jpg",
												"/C:/Users/alexs/OneDrive/Desktop/review2.jpg"
											]
										},
										{
											"key": "Tags",
											"value": "{{reviewTags0}}",
											"type": "text"
										},
										{
											"key": "Tags",
											"value": "{{reviewTags1}}",
											"type": "text"
										},
										{
											"key": "Tags",
											"value": "{{reviewTags2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    const review = pm.response.json();\r",
											"\r",
											"    pm.test(\"✅ Review updated successfully\", () => {\r",
											"        pm.expect(review).to.be.an(\"object\");\r",
											"        pm.expect(review.id).to.eql(pm.environment.get(\"reviewId\"));\r",
											"        pm.expect(review.rowVersion).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Обновляем актуальные значения после успешного обновления\r",
											"    pm.environment.set(\"reviewArticle\", review.article);\r",
											"    pm.environment.set(\"reviewMessage\", review.message);\r",
											"    pm.environment.set(\"reviewRating\", review.rating.toString());\r",
											"    pm.environment.set(\"reviewTags\", review.tags.join(\",\"));\r",
											"    pm.environment.set(\"reviewRowVersion\", review.rowVersion);\r",
											"    console.log(\"📝 Review data synced to 'review...' variables.\");\r",
											"} else {\r",
											"    pm.test(\"❌ Expected status 200\", () => {\r",
											"        pm.expect(pm.response.code).to.eql(200);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Случайные данные для обновления\r",
											"pm.environment.set(\"changedReviewArticle\", \"veniam aliquip dolor laboris dolore\");\r",
											"pm.environment.set(\"changedReviewMessage\", \"sunt deserunt tempor ut\");\r",
											"\r",
											"const rating = (1 + Math.random() * 4).toFixed(2); // Гарантированно от 1 до 5\r",
											"pm.environment.set(\"changedReviewRating\", rating);\r",
											"\r",
											"const changedTags = [\"changesTag1\", \"changesTag2\"];\r",
											"pm.environment.set(\"changedReviewTags0\", changedTags[0]);\r",
											"pm.environment.set(\"changedReviewTags1\", changedTags[1]);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Id",
											"value": "{{reviewId}}",
											"type": "text"
										},
										{
											"key": "RowVersion",
											"value": "{{reviewRowVersion}}",
											"type": "text"
										},
										{
											"key": "Article",
											"value": "{{changedReviewArticle}}",
											"type": "text"
										},
										{
											"key": "Message",
											"value": "{{changedReviewMessage}}",
											"type": "text"
										},
										{
											"key": "Rating",
											"value": "{{changedReviewRating}}",
											"type": "text"
										},
										{
											"key": "UploadedFiles",
											"type": "file",
											"src": [
												"/C:/Users/alexs/OneDrive/Desktop/review3.jpg",
												"/C:/Users/alexs/OneDrive/Desktop/review4.jpg"
											]
										},
										{
											"key": "Tags",
											"value": "{{changedReviewTags0}}",
											"type": "text"
										},
										{
											"key": "Tags",
											"value": "{{changedReviewTags1}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/reviews/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"reviews",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{reviewId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Toggle Like Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"👍 Review like toggled successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    // Проверим, что тело либо пустое, либо содержит 0 или 1\r",
											"    const resText = pm.response.text();\r",
											"    \r",
											"    if (resText) {\r",
											"        const result = JSON.parse(resText);\r",
											"        pm.expect(result).to.be.oneOf([0, 1]);\r",
											"        console.log(\"📌 Like status after toggle:\", result);\r",
											"    } else {\r",
											"        console.log(\"ℹ️ No body returned, only 200 OK.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account/reviews/:reviewId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"reviews",
										":reviewId",
										"like"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"🗑️ Review deleted successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.have.body; // Убедимся, что тело действительно пустое\r",
											"    console.log(\"✅ Review deleted (204 No Content)\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account/reviews/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"reviews",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{reviewId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Public",
					"item": [
						{
							"name": "Get Review by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    const review = pm.response.json();\r",
											"\r",
											"    pm.test(\"✔ Review loaded successfully\", () => {\r",
											"        pm.expect(review).to.be.an(\"object\");\r",
											"        pm.expect(review.id, \"Review ID should exist\").to.be.a(\"string\");\r",
											"        pm.expect(review.createdAt, \"CreatedAt should exist\").to.be.a(\"string\");\r",
											"        pm.expect(review.rowVersion, \"RowVersion should exist\").to.be.a(\"string\");\r",
											"        pm.expect(review.imageUrls, \"ImageUrls should be array\").to.be.an(\"array\");\r",
											"        pm.expect(review.tags, \"Tags should be array\").to.be.an(\"array\");\r",
											"    });\r",
											"\r",
											"    // Save to environment\r",
											"    pm.environment.set(\"reviewId\", review.id);\r",
											"    pm.environment.set(\"reviewCreatedAt\", review.createdAt);\r",
											"    pm.environment.set(\"reviewRowVersion\", review.rowVersion);\r",
											"\r",
											"    console.log(\"🆔 reviewId:\", review.id);\r",
											"    console.log(\"🕒 reviewCreatedAt:\", review.createdAt);\r",
											"    console.log(\"🔐 rowVersion:\", review.rowVersion);\r",
											"} else {\r",
											"    pm.test(\"❌ Request failed\", () => {\r",
											"        pm.expect(pm.response.code).to.eql(200);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/reviews/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"reviews",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{reviewId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Reviews by Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {\r",
											"    const response = pm.response.json();\r",
											"    const reviews = response.items;\r",
											"\r",
											"    pm.test(\"✔ Response contains 'items' array\", () => {\r",
											"        pm.expect(reviews).to.be.an(\"array\");\r",
											"        pm.expect(reviews.length).to.be.above(0);\r",
											"    });\r",
											"\r",
											"    const first = reviews[0];\r",
											"\r",
											"    pm.test(\"✔ First review has required fields\", () => {\r",
											"        pm.expect(first.id, \"ID\").to.be.a(\"string\");\r",
											"        pm.expect(first.createdAt, \"CreatedAt\").to.be.a(\"string\");\r",
											"        pm.expect(first.rowVersion, \"RowVersion\").to.be.a(\"string\");\r",
											"        pm.expect(first.imageUrls, \"ImageUrls\").to.be.an(\"array\");\r",
											"        pm.expect(first.tags, \"Tags\").to.be.an(\"array\");\r",
											"    });\r",
											"\r",
											"    // Save variables for next requests\r",
											"    pm.environment.set(\"reviewId\", first.id);\r",
											"    pm.environment.set(\"reviewCreatedAt\", first.createdAt);\r",
											"    pm.environment.set(\"reviewRowVersion\", first.rowVersion);\r",
											"\r",
											"    console.log(\"🆔 reviewId:\", first.id);\r",
											"    console.log(\"🕒 createdAt:\", first.createdAt);\r",
											"    console.log(\"🔐 rowVersion:\", first.rowVersion);\r",
											"} else {\r",
											"    pm.test(\"❌ Expected 200 OK\", () => {\r",
											"        pm.expect(pm.response.code).to.eql(200);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"reviews"
									],
									"query": [
										{
											"key": "ProductId",
											"value": "{{lastProductId}}",
											"disabled": true
										},
										{
											"key": "UserId",
											"value": "77777777-7777-7777-7777-777777777777",
											"disabled": true
										},
										{
											"key": "MinRating",
											"value": "3",
											"disabled": true
										},
										{
											"key": "MaxRating",
											"value": "5",
											"disabled": true
										},
										{
											"key": "Parameters.Page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "Parameters.PageSize",
											"value": "1",
											"disabled": true
										},
										{
											"key": "Parameters.SortBy",
											"value": "createdat",
											"disabled": true
										},
										{
											"key": "Parameters.SortOrder",
											"value": "desc",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Wishlist",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "Add Product to Wishlist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no body\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"{{lastProductId}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/wishlist",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"wishlist"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Wishlist",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account/wishlist?Page=1&PageSize=20&SortBy=name&SortOrder=asc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"wishlist"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "43",
											"disabled": true
										},
										{
											"key": "Page",
											"value": "1"
										},
										{
											"key": "PageSize",
											"value": "20"
										},
										{
											"key": "SortBy",
											"value": "name"
										},
										{
											"key": "SortOrder",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Toggle Product in Wishlist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"{{lastProductId}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/wishlist/toggle",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"wishlist",
										"toggle"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Product from Wishlist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account/wishlist/:productId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"wishlist",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{lastProductId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "Add Product to Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"✔ Status code is 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"✔ Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql('');\r",
											"});\r",
											"\r",
											"console.log(\"🛒 Product successfully added to cart.\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"{{lastProductId}}\",\n  \"quantity\": 2\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/cart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"cart"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Product Quantity in Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"✔ Status code is 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"✔ Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.eql('');\r",
											"});\r",
											"\r",
											"console.log(\"🛒 Product quantity successfully updated in cart.\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"{{lastProductId}}\",\n  \"quantity\": 5\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/cart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"cart"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cart List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"✔ Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const cartItems = pm.response.json();\r",
											"\r",
											"pm.test(\"✔ Response is an array\", function () {\r",
											"    pm.expect(cartItems).to.be.an(\"array\");\r",
											"    pm.expect(cartItems.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"const first = cartItems[0];\r",
											"\r",
											"pm.test(\"✔ First cart item has required fields\", function () {\r",
											"    pm.expect(first.productId, \"productId\").to.be.a(\"string\");\r",
											"    pm.expect(first.name, \"name\").to.be.a(\"string\");\r",
											"    pm.expect(first.imageUrl, \"imageUrl\").to.be.a(\"string\");\r",
											"    pm.expect(first.price, \"price\").to.be.a(\"number\");\r",
											"    pm.expect(first.quantity, \"quantity\").to.be.a(\"number\");\r",
											"    pm.expect(first.total, \"total\").to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"console.log(\"🛒 First cart item:\", first);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account/cart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"cart"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Product from Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"✔ Status code is 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"✔ Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account/cart/:productId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"cart",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{lastProductId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Change Order Status",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderId\": \"{{lastOrderId}}\",\n  \"newStatus\": 2\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/orders/:id/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastOrderId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account",
					"item": [
						{
							"name": "Add Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"const randomStr = () => Math.random().toString(36).substring(2, 10);\r",
											"\r",
											"pm.variables.set(\"orderFirstName\", \"John\");\r",
											"pm.variables.set(\"orderLastName\", \"Doe\");\r",
											"pm.variables.set(\"orderEmail\", `test_${randomStr()}@example.com`);\r",
											"pm.variables.set(\"orderCountry\", \"USA\");\r",
											"pm.variables.set(\"orderState\", \"California\");\r",
											"pm.variables.set(\"orderCity\", \"Los Angeles\");\r",
											"pm.variables.set(\"orderStreet\", \"Sunset Blvd\");\r",
											"pm.variables.set(\"orderHouseNumber\", random(1, 100).toString());\r",
											"pm.variables.set(\"orderApartmentNumber\", random(1, 50).toString());\r",
											"pm.variables.set(\"orderPostCode\", `${random(10000,99999)}`);\r",
											"pm.variables.set(\"orderCardNumber\", \"4111111111111111\"); // тестовый Visa\r",
											"pm.variables.set(\"orderExpirationDate\", \"12/26\");\r",
											"pm.variables.set(\"orderCvv\", random(100, 999).toString());\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const orderId = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"lastOrderId\", orderId); // или pm.variables.set(...) если хочешь временную\r",
											"console.log(\"✅ Order created:\", orderId);\r",
											"\r",
											"pm.test(\"Status is OK\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"{{orderFirstName}}\",\n  \"lastName\": \"{{orderLastName}}\",\n  \"email\": \"{{orderEmail}}\",\n  \"country\": \"{{orderCountry}}\",\n  \"state\": \"{{orderState}}\",\n  \"city\": \"{{orderCity}}\",\n  \"street\": \"{{orderStreet}}\",\n  \"houseNumber\": \"{{orderHouseNumber}}\",\n  \"apartmentNumber\": \"{{orderApartmentNumber}}\",\n  \"postCode\": \"{{orderPostCode}}\",\n  \"paymentType\": 1,\n  \"cardNumber\": \"{{orderCardNumber}}\",\n  \"expirationDate\": \"{{orderExpirationDate}}\",\n  \"cvv\": \"{{orderCvv}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/account/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Сохраняем order info в переменные окружения\r",
											"pm.environment.set(\"orderPrice\", body.price);\r",
											"pm.environment.set(\"orderStatus\", body.status);\r",
											"pm.environment.set(\"orderRecipient\", body.recipient);\r",
											"pm.environment.set(\"orderPaymentType\", body.paymentType);\r",
											"pm.environment.set(\"orderAddress\", body.address);\r",
											"pm.environment.set(\"orderCreatedAt\", body.orderedAt);\r",
											"\r",
											"// Сохраняем первый товар\r",
											"if (body.items && body.items.length > 0) {\r",
											"    const item = body.items[0];\r",
											"    pm.environment.set(\"orderItemId\", item.id);\r",
											"    pm.environment.set(\"orderItemName\", item.name);\r",
											"    pm.environment.set(\"orderItemImage\", item.imageUrl || item.imageUrl || item.image || \"\");\r",
											"    pm.environment.set(\"orderItemQuantity\", item.quantity);\r",
											"    pm.environment.set(\"orderItemPrice\", item.price);\r",
											"}\r",
											"\r",
											"// Лог в консоль\r",
											"console.log(\"🧾 Order loaded:\", body);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{lastOrderId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Orders by Filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const orders = pm.response.json();\r",
											"\r",
											"pm.test(\"Status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/account/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"orders"
									],
									"query": [
										{
											"key": "UserId",
											"value": "28d9cd55-6a39-8e45-71b6-46fe31461ce7",
											"disabled": true
										},
										{
											"key": "SearchTerm",
											"value": "California23",
											"disabled": true
										},
										{
											"key": "Status",
											"value": "0",
											"disabled": true
										},
										{
											"key": "Parameters.Page",
											"value": "42575479",
											"disabled": true
										},
										{
											"key": "Parameters.PageSize",
											"value": "42575479",
											"disabled": true
										},
										{
											"key": "Parameters.SortBy",
											"value": "in nisi sunt",
											"disabled": true
										},
										{
											"key": "Parameters.SortOrder",
											"value": "in nisi sunt",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Promote User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no content\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/:userId/role/promote",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										":userId",
										"role",
										"promote"
									],
									"variable": [
										{
											"key": "userId",
											"value": "77777777-7777-7777-7777-777777777777",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Demote User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has no content\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/:userId/role/demote",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										":userId",
										"role",
										"demote"
									],
									"variable": [
										{
											"key": "userId",
											"value": "77777777-7777-7777-7777-777777777777",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bulk Delete Users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userIds\": [\n    \"B8AE04F8-C84D-430E-9210-0D35BB131EF4\",\n    \"77777777-7777-7777-7777-777777777778\",\n    \"88888888-8888-8888-8888-888888888887\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/delete-many",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"delete-many"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bulk Restore Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userIds\": [\n    \"9E5354E5-4F96-4243-A85B-E82465623F41\",\n    \"77777777-7777-7777-7777-777777777778\",\n    \"88888888-8888-8888-8888-888888888887\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/restore-many",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"restore-many"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users by Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									],
									"query": [
										{
											"key": "Search",
											"value": "fast",
											"disabled": true
										},
										{
											"key": "Role",
											"value": "0",
											"disabled": true
										},
										{
											"key": "Status",
											"value": "1",
											"disabled": true
										},
										{
											"key": "Parameters.Page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "Parameters.PageSize",
											"value": "2",
											"disabled": true
										},
										{
											"key": "Parameters.SortBy",
											"value": "createdat",
											"disabled": true
										},
										{
											"key": "Parameters.SortOrder",
											"value": "desc",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/admin/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "77777777-7777-7777-7777-777777777777"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account",
					"item": [
						{
							"name": "Get Me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/account/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"account",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Collections",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Add Collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Название коллекции\r",
											"pm.collectionVariables.set(\"collectionTitle\", \"New Spring Collection\");\r",
											"\r",
											"// Цены\r",
											"pm.collectionVariables.set(\"collectionMinPrice\", \"199.99\");\r",
											"pm.collectionVariables.set(\"collectionMaxPrice\", \"599.99\");\r",
											"\r",
											"// JSON строка фильтров: ключ-значение\r",
											"const filters = [\r",
											"  { key: \"Color\", value: \"Black\" },\r",
											"  { key: \"Size\", value: \"S\" }\r",
											"];\r",
											"pm.collectionVariables.set(\"collectionFilters\", JSON.stringify(filters));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"✅ Status code is 201 Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"try {\r",
											"    const json = pm.response.json();\r",
											"    const collectionId = json.id;\r",
											"\r",
											"    if (collectionId) {\r",
											"        pm.environment.set(\"collectionId\", collectionId);\r",
											"        console.log(\"✅ Saved collectionId:\", collectionId);\r",
											"    } else {\r",
											"        console.warn(\"⚠️ Response JSON does not contain 'id'\");\r",
											"    }\r",
											"} catch (err) {\r",
											"    console.error(\"❌ Failed to parse response JSON\", err);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Title",
											"value": "{{collectionTitle}}",
											"type": "text"
										},
										{
											"key": "CategoryId",
											"value": "{{categoryId}}",
											"type": "text"
										},
										{
											"key": "MinPrice",
											"value": "{{collectionMinPrice}}",
											"type": "text"
										},
										{
											"key": "MaxPrice",
											"value": "{{collectionMaxPrice}}",
											"type": "text"
										},
										{
											"key": "Filters",
											"value": "{{collectionFilters}}",
											"type": "text"
										},
										{
											"key": "Image",
											"type": "file",
											"src": "/C:/Users/alexs/OneDrive/Desktop/Postman/review1.jpg"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Название коллекции\r",
											"pm.collectionVariables.set(\"collectionTitle\", \"Updated Collection Title\");\r",
											"\r",
											"// Цены\r",
											"pm.collectionVariables.set(\"collectionMinPrice\", \"149.99\");\r",
											"pm.collectionVariables.set(\"collectionMaxPrice\", \"799.00\");\r",
											"\r",
											"// JSON строка фильтров: ключ-значение\r",
											"const filters = [\r",
											"    { key: \"Color\", value: \"Black\" },\r",
											"    { key: \"Size\", value: \"M\" }\r",
											"];\r",
											"pm.collectionVariables.set(\"collectionFilters\", JSON.stringify(filters));\r",
											"\r",
											"// (предполагается, что collectionId и collectionCategoryId уже заданы)\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "Id",
											"value": "{{collectionId}}",
											"type": "text"
										},
										{
											"key": "Title",
											"value": "{{collectionTitle}}",
											"type": "text"
										},
										{
											"key": "CategoryId",
											"value": "{{categoryId}}",
											"type": "text"
										},
										{
											"key": "MinPrice",
											"value": "{{collectionMinPrice}}",
											"type": "text"
										},
										{
											"key": "MaxPrice",
											"value": "{{collectionMaxPrice}}",
											"type": "text"
										},
										{
											"key": "Filters",
											"value": "{{collectionFilters}}",
											"type": "text"
										},
										{
											"key": "Image",
											"type": "file",
											"src": "/C:/Users/alexs/OneDrive/Desktop/Postman/review2.jpg"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{collectionId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/admin/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{collectionId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Public",
					"item": [
						{
							"name": "Get All Collections by Filter",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/collections?CategoryId={{categoryId}}&Parameters.Page=1&Parameters.PageSize=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"collections"
									],
									"query": [
										{
											"key": "SearchTerm",
											"value": "deserunt minim",
											"disabled": true
										},
										{
											"key": "CategoryId",
											"value": "{{categoryId}}"
										},
										{
											"key": "MinPrice",
											"value": "199",
											"disabled": true
										},
										{
											"key": "MaxPrice",
											"value": "599",
											"disabled": true
										},
										{
											"key": "Parameters.Page",
											"value": "1"
										},
										{
											"key": "Parameters.PageSize",
											"value": "20"
										},
										{
											"key": "Parameters.SortBy",
											"value": "maxprice",
											"disabled": true
										},
										{
											"key": "Parameters.SortOrder",
											"value": "asc",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const json = pm.response.json();\r",
											"\r",
											"if (json?.id) {\r",
											"    pm.collectionVariables.set(\"collectionId\", json.id);\r",
											"    console.log(\"✅ collectionId set:\", json.id);\r",
											"} else {\r",
											"    console.warn(\"⚠️ No 'id' found in response JSON\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{collectionId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "/"
		},
		{
			"key": "collectionTitle",
			"value": ""
		},
		{
			"key": "collectionMinPrice",
			"value": ""
		},
		{
			"key": "collectionMaxPrice",
			"value": ""
		},
		{
			"key": "collectionFilters",
			"value": ""
		},
		{
			"key": "collectionId",
			"value": ""
		}
	]
}